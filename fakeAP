#! /usr/bin/env python2
#! Copyright (C) 2015-2015 Hack Stuff. All right reserved.
#
# Author : 2015/05 cmj<cmj@cmj.tw>

class SHIT_AP(object):
	def __init__(self, conf="fakeAP.conf"):
		with open(conf) as fd:
			conf = fd.read().split('\n')
		self.conf = [_ for _ in conf if _ and not _.startswith('#')]
	def __call__(self, action, args):
		getattr(self, action)(args)

	def start(self, args):
		if args.client:
			self.wpa_supplicantStart()
		else:
			self.hostapdStart()
			self.dnsmasqStart()
			self.NAT(start=True)
			self.ipSet()
	def stop(self, args):
		if args.client:
			self.wpa_supplicantStop()
		else:
			for serv in ("hostapd", "dnsmasq"):
				self.service(serv, start=False)
			self.NAT(start=False)
	def scan(self, args):
		result = self._scan_(args)
		for idx, ret in enumerate(result):
			print "{0:<4}{1:<20}{3:8}-{2:>3}  {4:16}".format(idx+1, *ret)

	def _scan_(self, args=None):
		import commands, re

		wifi = self.ScanWiFi['NAME']
		if not wifi:
			raise SystemError("Not the valid WiFi")

		cmd = 'iwlist {0} scan'.format(wifi)
		ret = commands.getoutput(cmd)
		ret = ret.split('Cell')

		TOKEN = [r'Address: (\S*)', r'Channel:(\d+)', r'Quality=(\S*)', r'ESSID:"(.*?)"']
		TOKEN = r"[\s\S]*".join(TOKEN)

		cnt, result = 1, []
		for _ in ret:
			tmp = re.search(TOKEN, _, re.MULTILINE)
			if not tmp:
				continue
			result.append(tmp.groups())

		## Sorted by ESSID
		result = sorted(result, key=lambda x: x[3])
		return result

	def wpa_supplicantStart(self, path="/etc/wpa_supplicant/wpa_supplicant.conf"):
		import commands

		conf = """
			ctrl_interface=/var/run/wpa_supplicant
			network={{
				ssid="{TGT_SSID}"
				key_mgmt=WPA-PSK
				proto={TGT_PROTO}
				pairwise=CCMP
				group=CCMP
				psk="{TGT_PSK}"
			}}
		"""

		with open(path, 'w') as fd:
			conf = conf.format(**self.conf)
			conf = "\n".join([_.strip() for _ in conf.split('\n')])
			fd.write(conf)

		cmd = "wpa_supplicant -B -i{0[NAME]} -c {1}".format(self.ScanWiFi, path)
		commands.getoutput(cmd)
	def wpa_supplicantStop(self):
		import commands, os

		ret = commands.getoutput("ps aux | grep wpa_supplicant | grep -v grep | awk '{print $2}'")
		for pid in [_ for _ in ret.split('\n') if _]:
			os.kill(int(pid), 9)
	def hostapdStart(self, path="/etc/hostapd/hostapd.conf"):
		conf = """
			bssid={MAC}
			ssid={SSID}
			interface={NIC}
			channel={CHANNEL}
			driver={DRIVER}
		"""

		with open(path, 'w') as fd:
			conf = conf.format(**self.conf)
			conf = "\n".join([_.strip() for _ in conf.split('\n')])
			fd.write(conf)

		## In the Kali case, default hostapd configure is not setting
		if os.path.isfile("/etc/default/hostapd"):
			import re

			with open("/etc/default/hostapd") as fd:
				data = fd.read()
			data = re.sub(r'#DAEMON_CONF=""', r'DAEMON_CONF="{0}"'.format(path), data)
			with open("/etc/default/hostapd", 'w') as fd:
				fd.write(data)

		self.service("hostapd")
	def dnsmasqStart(self, path="/etc/dnsmasq.conf"):
		conf  = """
			dhcp-leasefile=/tmp/dnsmasq.lease
			interface={NIC}
			dhcp-range={DHCP_RANGE},12h	# DHCP IP range
			dhcp-option=1,255.255.255.0	# subnet mask
			dhcp-option=28,{BROADCAST}	# broadcast
			dhcp-option=3,{IP}			# default gateway
			dhcp-option=6,{IP}			# DNS
		"""

		with open(path, 'w') as fd:
			conf = conf.format(**self.conf)
			conf = "\n".join([_.strip() for _ in conf.split('\n')])
			fd.write(conf)
		self.service('dnsmasq')
	def service(self, name, start=True):
		import commands

		if 'service' == self.conf['SERVICE_TOOL']:
			cmd = "%s {0} %s" %(self.conf['SERVICE_TOOL'], 'start' if start else 'stop')
		elif 'systemctl' == self.conf['SERVICE_TOOL']:
			cmd = "%s %s {0}" %(self.conf['SERVICE_TOOL'], 'start' if start else 'stop')
		print cmd.format(name)
		return commands.getoutput(cmd.format(name))
	def NAT(self, start=True, label="SHIT_FakeAP"):
		import commands

		## Enable port forwarding
		commands.getoutput("echo 1 > /proc/sys/net/ipv4/ip_forward")

		comment = '-m comment --comment "{label}"'.format(label=label)
		if start:
			cmd  = ['iptables-save | grep -v "{label}" | iptables-restore']
			cmd += ['iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE {comment}']
			cmd += ['iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT {comment}']
			cmd += ['iptables -A FORWARD -i {NIC} -o eth0 {comment}']
		else:
			cmd  = ['iptables-save | grep -v "{label}" | iptables-restore']

		for c in cmd:
			_c = c.format(label=label, comment=comment, **self.conf)
			commands.getoutput(_c)
	def ipSet(self):
		import commands

		return commands.getoutput("ifconfig {NIC} {IP}".format(**self.conf))

	@property
	def conf(self):
		return self._conf_
	@conf.setter
	def conf(self, v):
		import re

		self._conf_ = {"CHANNEL": 4}

		conf = {_.split('=')[0]: '='.join(_.split('=')[1:]) for _ in v}
		for _ in conf:
			if re.match(r'(["\']).*?\1', conf[_]):
				conf[_] = conf[_][1:-1]
		self._conf_.update(conf)

		## Automatically append the configure
		self._conf_["MAC"] = self.APWiFi['MAC']
		self._conf_["NIC"] = self.APWiFi['NAME']
		self._conf_["BROADCAST"] = "{0}.{1}.{2}.255".format(*self._conf_["IP"].split('.'))
		self._conf_["DHCP_RANGE"] = "{0}.{1}.{2}.100,{0}.{1}.{2}.200"
		self._conf_["DHCP_RANGE"] = self._conf_["DHCP_RANGE"].format(*self._conf_["IP"].split('.'))
	@property
	def WiFiList(self, path='/sys/class/net'):
		import os
		return [_ for _ in os.listdir(path) if _.startswith('wlan')]
	@property
	def APWiFi(self, path='/sys/class/net'):
		if hasattr(self, "_APWiFi_"):
			return self._APWiFi_

		for wifi in self.WiFiList:
			with open('{0}/{1}/address'.format(path, wifi)) as fd:
				mac = fd.read()
				if mac.startswith(self._conf_['MACPREFIX']):
					self._APWiFi_ = {"NAME": wifi, "MAC": mac.strip()}
					return self._APWiFi_
		else:
			return None
	@property
	def ScanWiFi(self, path='/sys/class/net'):
		if hasattr(self, "_ScanWiFi_"):
			return self._ScanWiFi_

		for wifi in self.WiFiList:
			with open('{0}/{1}/address'.format(path, wifi)) as fd:
				mac = fd.read()
				if not mac.startswith(self._conf_['MACPREFIX']):
					self._ScanWiFi_ = {"NAME": wifi, "MAC": mac.strip()}
					return self._ScanWiFi_
		else:
			return None
	@property
	def PopularESSID(self):
		ret = [_[-1] for _ in self._scan_()]
		ret = {_: ret.count(_) for _ in set(ret)}
		tmp = ""
		for _ in ret:
			if not tmp:
				tmp = _
			elif ret[tmp] <= ret[_]:
				tmp = _
		return tmp

if __name__ == '__main__':
	import argparse, os

	if os.getuid() and os.geteuid():
		exit("You need to run as root")

	parser = argparse.ArgumentParser(description="SHIT AP tools")
	_a = parser.add_argument
	_a("-c", "--client", default=False, action='store_true',
		help="client mode")
	_a("action", choices=['start', 'stop', 'scan'],
		help="action mode")
	args = parser.parse_args()

	ap = SHIT_AP()
	ap(args.action, args)

