#! /usr/bin/env bash

if [ -f fakeAP.conf ]; then
	. fakeAP.conf
else
	. fakeAP.conf.example
fi

BIN=(hostapd dnsmasq iw python2 scapy bash-completion)

run_service () {
	PROG="$1"
	OP="$2"
	if [ $(which systemctl) ]; then
		systemctl enable ${PROG}
		systemctl ${OP} ${PROG}
	elif [ $(which service) ]; then
		## In the debin system, hostapd does NOT set well
		if [ "${PROG}" = "hostapd" ]; then
			sed -i 's/^#DAEMON_CONF=.*$/DAEMON_CONF="\/etc\/hostapd\/hostapd.conf"/g' /etc/default/hostapd
        fi
		service ${PROG} ${OP}
	else
		echo -e "\e[1;31mUnknown service command\e[m"
	fi
}
ap_dongle() {
	MAC="$1"
	if [ x"${MAC}" = x"" ] ;then
		echo ""
	else
		ls /sys/class/net/ | grep -v "mon" | while read NIC
		do
			if [ x"`cat /sys/class/net/$NIC/address | grep $MAC`" != x"" ]; then
				echo $NIC
			fi
		done
		echo ""
	fi
}
not_ap_dongle() {
	NIC=$(ap_dongle ${MACPREFIX})
	echo $(ls /sys/class/net/ | grep wlan | grep -v ${NIC})
}
checkRoot() {
	if [ x`id -u` != x0 ]; then
		echo -e "\x1b[1;31mNeed to be root\x1b[m"
		exit -1
	fi
}
hostapd_conf() {
	HOSTAPD_CONF="/etc/hostapd/hostapd.conf"
	
	if [ x"${#@}" = x"0" ]; then
		SSID=( RPi2 )
	else
		SSID=${@}
	fi

	NIC=$(ap_dongle $MACPREFIX)
	MAC=`cat /sys/class/net/${NIC}/address`

	cat << EOF > $HOSTAPD_CONF
bssid=${MAC}
ssid=${SSID[0]}
interface=$NIC
channel=$CHANNEL
driver=${DRIVER}
EOF
}
ip_set() {
	ifconfig $(ap_dongle $MACPREFIX) $IP
}
ap() {
	case $1 in
		start)
			hostapd_conf ${@:2}
			run_service hostapd start
			;;
		stop)
			run_service hostapd stop
			;;
		*)
			echo "ap [start|stop]"
	esac
}
dnsmasq_conf() {
	ip=$(echo $IP | sed 's/\([[:digit:]]*\)$//')

	cat << EOF > /etc/dnsmasq.conf
dhcp-leasefile=/tmp/dnsmasq.lease
interface=$(ap_dongle $MACPREFIX)
dhcp-range=${ip}10,${ip}254,12h		# DHCP IP range
dhcp-option=1,255.255.255.0			# subnet mask
dhcp-option=28,${ip}255				# broadcast
dhcp-option=3,$IP					# default gateway
dhcp-option=6,$IP					# DNS
EOF
}
dns() {
	case $1 in
		start)
			dnsmasq_conf
			run_service dnsmasq start
			;;
		stop)
			run_service dnsmasq stop
			;;
		*)
			echo -e "\e[1;31mdns [start|stop]\e[m"
	esac
}
NAT() {
	## Always enable ip forward
	echo 1 > /proc/sys/net/ipv4/ip_forward
	case $1 in
		start)
			iptables-save | grep -v "SHIT_FakeAP" | iptables-restore
			iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE -m comment --comment "SHIT_FakeAP"
			iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -m comment --comment "SHIT_FakeAP"
			iptables -A FORWARD -i $(ap_dongle $MACPREFIX) -o eth0 -j ACCEPT -m comment --comment "SHIT_FakeAP"
			;;
		stop)
			iptables-save | grep -v "SHIT_FakeAP" | iptables-restore
			;;
		*)
			;;
	esac
}
scanSSID() {
	result=`iwlist $(not_ap_dongle) scan`
	ESSID=( $(echo "${result}" | grep ESSID | sed 's/ESSID:"\(.*\)"/\1/g') )
	Address=( $(echo "${result}" | grep Address | sed 's/Cell [[:digit:]]\+ - Address://g') )
	Quality=( $(echo "${result}" | grep Quality | sed 's/Quality[=:]\(.*\) S\(.*\)/\1/g') )

	NR=$(echo -e "${#ESSID[@]}\n${#Address[@]}\n${#Quality[@]}" | sort -g | head -n1)
	for idx in $(seq 0 $((NR-1)))
	do
		printf "%-3d%-16s%-8s%16s\n" $((idx+1)) ${ESSID[$idx]} ${Quality[$idx]} ${Address[$idx]}
	done
}
case "$1" in
	info)
		NR=$(ls /sys/class/net/ | grep -v "mon" | grep wlan | wc -l)
		echo -e "\e[1;36m#${NR} wifi dongle\e[m"
		for idx in $(seq ${NR})
		do
			printf "%8s%24s\n" "wlan$((idx-1))" $(cat /sys/class/net/wlan$((idx-1))/address)
		done
		;;
	start)
		checkRoot
        echo -e "\e[1;36mFake AP [${@:2}] listening on "$(ap_dongle $MACPREFIX)"\e[m"
		ip_set
		ap	start ${@:2}
		dns	start
		NAT start
		;;
	stop)
		checkRoot
		ap	stop
		dns	stop
		NAT stop
		;;
	status)
		if [ x"$(ps aux | grep -v grep | grep dnsmasq)" = x"" ] ; then
			echo -e "\e[1;31mdnsmasq not start!\e[m"
		elif [ x"$(ps aux | grep -v grep | grep hostapd)" = x"" ]; then
			echo -e "\e[1;31mhostapd not start!\e[m"
		else
			echo -e "\e[1;36m$(cat /tmp/dnsmasq.lease | wc -l) Clients\e[m"
		fi

		NR=$(cat /tmp/dnsmasq.lease | wc -l)
		if [ ${NR} != 0 ]; then
			cat /tmp/dnsmasq.lease | while read line
			do
				line=($line)
				echo ""
				echo -e "\t${line[3]}\t${line[2]}\t${line[1]}"
			done
		fi
		;;
	scan)
		scanSSID
		;;
	*)
		cat <<EOF
$0 [opcode]

	info          - Display the information about $0
	install       - Install the necessary packages
	start         - Start AP
	stop          - Stop AP
	status        - List the current connection"
	scan          - Scan all public WiFi AP
	monitor-start - Start the monitor mode
	monitor-stop  - Stop the monitor mode
EOF
		;;
esac

